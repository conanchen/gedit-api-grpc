// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_posting.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingPosting.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
 #import "gedit/accounting/AccountingEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDAAccountingPostingRoot

@implementation GDAAccountingPostingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAAccountingPostingRoot_FileDescriptor

static GPBFileDescriptor *GDAAccountingPostingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAListPostingRequest

@implementation GDAListPostingRequest

@dynamic userUuid;
@dynamic accountUuid;
@dynamic journalUuid;
@dynamic from;
@dynamic size;

typedef struct GDAListPostingRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *userUuid;
  NSString *accountUuid;
  NSString *journalUuid;
} GDAListPostingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAListPostingRequest_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListPostingRequest__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAListPostingRequest_FieldNumber_AccountUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListPostingRequest__storage_, accountUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "journalUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAListPostingRequest_FieldNumber_JournalUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAListPostingRequest__storage_, journalUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDAListPostingRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAListPostingRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListPostingRequest_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAListPostingRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListPostingRequest class]
                                     rootClass:[GDAAccountingPostingRoot class]
                                          file:GDAAccountingPostingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListPostingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\013\010\000\014\013\000\r\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListMyPostingRequest

@implementation GDAListMyPostingRequest

@dynamic accountUuid;
@dynamic lastUpdated;
@dynamic from;
@dynamic size;

typedef struct GDAListMyPostingRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *accountUuid;
  int64_t lastUpdated;
} GDAListMyPostingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAListMyPostingRequest_FieldNumber_AccountUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListMyPostingRequest__storage_, accountUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = GDAListMyPostingRequest_FieldNumber_LastUpdated,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListMyPostingRequest__storage_, lastUpdated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDAListMyPostingRequest_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAListMyPostingRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListMyPostingRequest_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAListMyPostingRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListMyPostingRequest class]
                                     rootClass:[GDAAccountingPostingRoot class]
                                          file:GDAAccountingPostingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListMyPostingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\014\013\000\r\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetPostingRequest

@implementation GDAGetPostingRequest

@dynamic uuid;

typedef struct GDAGetPostingRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} GDAGetPostingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAGetPostingRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAGetPostingRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetPostingRequest class]
                                     rootClass:[GDAAccountingPostingRoot class]
                                          file:GDAAccountingPostingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAGetPostingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPostingResponse

@implementation GDAPostingResponse

@dynamic hasStatus, status;
@dynamic hasPosting, posting;

typedef struct GDAPostingResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAPosting *posting;
  GDAStatus *status;
} GDAPostingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "posting",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPosting),
        .number = GDAPostingResponse_FieldNumber_Posting,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPostingResponse__storage_, posting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAPostingResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPostingResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPostingResponse class]
                                     rootClass:[GDAAccountingPostingRoot class]
                                          file:GDAAccountingPostingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPostingResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPosting

@implementation GDAPosting

@dynamic uuid;
@dynamic userUuid;
@dynamic accountUuid;
@dynamic journalUuid;
@dynamic amount;
@dynamic created;
@dynamic comment;

typedef struct GDAPosting__storage_ {
  uint32_t _has_storage_[1];
  int32_t amount;
  NSString *uuid;
  NSString *userUuid;
  NSString *accountUuid;
  NSString *journalUuid;
  NSString *comment;
  int64_t created;
} GDAPosting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_UserUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_AccountUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, accountUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "journalUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_JournalUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, journalUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_Created,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = NULL,
        .number = GDAPosting_FieldNumber_Comment,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDAPosting__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPosting class]
                                     rootClass:[GDAAccountingPostingRoot class]
                                          file:GDAAccountingPostingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPosting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\013\010\000\014\013\000\r\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
