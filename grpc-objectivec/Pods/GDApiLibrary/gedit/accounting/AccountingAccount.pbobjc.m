// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_account.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingAccount.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ACCNTAccountingAccountRoot

@implementation ACCNTAccountingAccountRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ACCNTAccountingAccountRoot_FileDescriptor

static GPBFileDescriptor *ACCNTAccountingAccountRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"ACCNT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACCNTUpsertAccountsRequest

@implementation ACCNTUpsertAccountsRequest

@dynamic userUuid;

typedef struct ACCNTUpsertAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userUuid;
} ACCNTUpsertAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTUpsertAccountsRequest_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTUpsertAccountsRequest__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTUpsertAccountsRequest class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTUpsertAccountsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTListMyAccountRequest

@implementation ACCNTListMyAccountRequest

@dynamic lastUpdated;

typedef struct ACCNTListMyAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t lastUpdated;
} ACCNTListMyAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTListMyAccountRequest_FieldNumber_LastUpdated,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTListMyAccountRequest__storage_, lastUpdated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTListMyAccountRequest class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTListMyAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTAccountResponse

@implementation ACCNTAccountResponse

@dynamic hasStatus, status;
@dynamic hasAccount, account;

typedef struct ACCNTAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  ACCNTAccount *account;
  COMMONStatus *status;
} ACCNTAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTAccount),
        .number = ACCNTAccountResponse_FieldNumber_Account,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = ACCNTAccountResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTAccountResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTAccountResponse class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTAccount

@implementation ACCNTAccount

@dynamic uuid;
@dynamic userUuid;
@dynamic type;
@dynamic previousBalance;
@dynamic previousDate;
@dynamic currentChanges;
@dynamic currentDate;
@dynamic currentBalance;
@dynamic created;
@dynamic lastUpdated;

typedef struct ACCNTAccount__storage_ {
  uint32_t _has_storage_[1];
  COMMONAccountType type;
  int32_t previousBalance;
  int32_t currentChanges;
  int32_t currentBalance;
  NSString *uuid;
  NSString *userUuid;
  int64_t previousDate;
  int64_t currentDate;
  int64_t created;
  int64_t lastUpdated;
} ACCNTAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_UserUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = COMMONAccountType_EnumDescriptor,
        .number = ACCNTAccount_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "previousBalance",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_PreviousBalance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, previousBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "previousDate",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_PreviousDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, previousDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentChanges",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_CurrentChanges,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, currentChanges),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currentDate",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_CurrentDate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, currentDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentBalance",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_CurrentBalance,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, currentBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_Created,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTAccount_FieldNumber_LastUpdated,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ACCNTAccount__storage_, lastUpdated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTAccount class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTAccount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\014\010\000\017\017\000\020\014\000\021\016\000\022\013\000\023\016\000=\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACCNTAccount_Type_RawValue(ACCNTAccount *message) {
  GPBDescriptor *descriptor = [ACCNTAccount descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ACCNTAccount_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetACCNTAccount_Type_RawValue(ACCNTAccount *message, int32_t value) {
  GPBDescriptor *descriptor = [ACCNTAccount descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ACCNTAccount_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ACCNTGetAccountRequest

@implementation ACCNTGetAccountRequest

@dynamic uuid;

typedef struct ACCNTGetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} ACCNTGetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTGetAccountRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTGetAccountRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTGetAccountRequest class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTGetAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTFindAccountRequest

@implementation ACCNTFindAccountRequest

@dynamic valueOneOfCase;
@dynamic userAndAccountType;

typedef struct ACCNTFindAccountRequest__storage_ {
  uint32_t _has_storage_[2];
  ACCNTUserAndAccountType *userAndAccountType;
} ACCNTFindAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAndAccountType",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTUserAndAccountType),
        .number = ACCNTFindAccountRequest_FieldNumber_UserAndAccountType,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTFindAccountRequest__storage_, userAndAccountType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTFindAccountRequest class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTFindAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ACCNTFindAccountRequest_ClearValueOneOfCase(ACCNTFindAccountRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ACCNTUserAndAccountType

@implementation ACCNTUserAndAccountType

@dynamic userUuid;
@dynamic type;

typedef struct ACCNTUserAndAccountType__storage_ {
  uint32_t _has_storage_[1];
  COMMONAccountType type;
  NSString *userUuid;
} ACCNTUserAndAccountType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTUserAndAccountType_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTUserAndAccountType__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = COMMONAccountType_EnumDescriptor,
        .number = ACCNTUserAndAccountType_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTUserAndAccountType__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTUserAndAccountType class]
                                     rootClass:[ACCNTAccountingAccountRoot class]
                                          file:ACCNTAccountingAccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTUserAndAccountType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ACCNTUserAndAccountType_Type_RawValue(ACCNTUserAndAccountType *message) {
  GPBDescriptor *descriptor = [ACCNTUserAndAccountType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ACCNTUserAndAccountType_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetACCNTUserAndAccountType_Type_RawValue(ACCNTUserAndAccountType *message, int32_t value) {
  GPBDescriptor *descriptor = [ACCNTUserAndAccountType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ACCNTUserAndAccountType_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
