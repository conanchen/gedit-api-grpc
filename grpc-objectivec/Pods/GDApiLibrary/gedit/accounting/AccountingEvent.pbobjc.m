// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ACCNTAccountingEventRoot

@implementation ACCNTAccountingEventRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ACCNTAccountingEventRoot_FileDescriptor

static GPBFileDescriptor *ACCNTAccountingEventRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"ACCNT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACCNTPaymentCreatedEvent

@implementation ACCNTPaymentCreatedEvent

@dynamic pointsOneOfCase;
@dynamic uuid;
@dynamic payerUuid;
@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic payeeWorkerUuid;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;
@dynamic pointsRepay;
@dynamic channel;
@dynamic created;

typedef struct ACCNTPaymentCreatedEvent__storage_ {
  uint32_t _has_storage_[2];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  int32_t pointsRepay;
  NSString *uuid;
  NSString *payerUuid;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
  NSString *payeeWorkerUuid;
  NSString *channel;
  int64_t created;
} ACCNTPaymentCreatedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PayerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, payerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PayeeUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PayeeStoreUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeWorkerUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PayeeWorkerUuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, payeeWorkerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_ShouldPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_ActualPay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PointsPay,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsRepay",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_PointsRepay,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, pointsRepay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_Channel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTPaymentCreatedEvent_FieldNumber_Created,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ACCNTPaymentCreatedEvent__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTPaymentCreatedEvent class]
                                     rootClass:[ACCNTAccountingEventRoot class]
                                          file:ACCNTAccountingEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTPaymentCreatedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "points",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\013\t\000\014\t\000\r\016\000\016\017\000\017\t\000\020\t\000\021\t\000\022\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ACCNTPaymentCreatedEvent_ClearPointsOneOfCase(ACCNTPaymentCreatedEvent *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ACCNTUserVerifiedEvent

@implementation ACCNTUserVerifiedEvent

@dynamic userUuid;
@dynamic introducerUuid;
@dynamic created;

typedef struct ACCNTUserVerifiedEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *userUuid;
  NSString *introducerUuid;
  int64_t created;
} ACCNTUserVerifiedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTUserVerifiedEvent_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTUserVerifiedEvent__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introducerUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTUserVerifiedEvent_FieldNumber_IntroducerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTUserVerifiedEvent__storage_, introducerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTUserVerifiedEvent_FieldNumber_Created,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACCNTUserVerifiedEvent__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTUserVerifiedEvent class]
                                     rootClass:[ACCNTAccountingEventRoot class]
                                          file:ACCNTAccountingEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTUserVerifiedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\013\010\000\014\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTStoreVerifiedEvent

@implementation ACCNTStoreVerifiedEvent

@dynamic storeUuid;
@dynamic introducerUuid;
@dynamic storeOwnerUuid;
@dynamic created;

typedef struct ACCNTStoreVerifiedEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *storeUuid;
  NSString *introducerUuid;
  NSString *storeOwnerUuid;
  int64_t created;
} ACCNTStoreVerifiedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTStoreVerifiedEvent_FieldNumber_StoreUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTStoreVerifiedEvent__storage_, storeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "introducerUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTStoreVerifiedEvent_FieldNumber_IntroducerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTStoreVerifiedEvent__storage_, introducerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeOwnerUuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTStoreVerifiedEvent_FieldNumber_StoreOwnerUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACCNTStoreVerifiedEvent__storage_, storeOwnerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTStoreVerifiedEvent_FieldNumber_Created,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACCNTStoreVerifiedEvent__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTStoreVerifiedEvent class]
                                     rootClass:[ACCNTAccountingEventRoot class]
                                          file:ACCNTAccountingEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTStoreVerifiedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\013\t\000\014\016\000\r\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
