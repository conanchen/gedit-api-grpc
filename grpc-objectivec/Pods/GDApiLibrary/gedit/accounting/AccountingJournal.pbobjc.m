// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_journal.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingJournal.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
 #import "gedit/accounting/AccountingEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ACCNTAccountingJournalRoot

@implementation ACCNTAccountingJournalRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ACCNTAccountingJournalRoot_FileDescriptor

static GPBFileDescriptor *ACCNTAccountingJournalRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"ACCNT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ACCNTUpsertJournalRequest

@implementation ACCNTUpsertJournalRequest

@dynamic eventOneOfCase;
@dynamic paymentCreatedEvent;
@dynamic userVerifiedEvent;
@dynamic storeCreatedEvent;

typedef struct ACCNTUpsertJournalRequest__storage_ {
  uint32_t _has_storage_[2];
  ACCNTPaymentCreatedEvent *paymentCreatedEvent;
  ACCNTUserVerifiedEvent *userVerifiedEvent;
  ACCNTStoreVerifiedEvent *storeCreatedEvent;
} ACCNTUpsertJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTPaymentCreatedEvent),
        .number = ACCNTUpsertJournalRequest_FieldNumber_PaymentCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTUpsertJournalRequest__storage_, paymentCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTUserVerifiedEvent),
        .number = ACCNTUpsertJournalRequest_FieldNumber_UserVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTUpsertJournalRequest__storage_, userVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTStoreVerifiedEvent),
        .number = ACCNTUpsertJournalRequest_FieldNumber_StoreCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTUpsertJournalRequest__storage_, storeCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTUpsertJournalRequest class]
                                     rootClass:[ACCNTAccountingJournalRoot class]
                                          file:ACCNTAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTUpsertJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\023\000\002\021\000\003\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ACCNTUpsertJournalRequest_ClearEventOneOfCase(ACCNTUpsertJournalRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ACCNTListJournalRequest

@implementation ACCNTListJournalRequest

@dynamic from;
@dynamic size;

typedef struct ACCNTListJournalRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
} ACCNTListJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTListJournalRequest_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTListJournalRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTListJournalRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTListJournalRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTListJournalRequest class]
                                     rootClass:[ACCNTAccountingJournalRoot class]
                                          file:ACCNTAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTListJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTGetJournalRequest

@implementation ACCNTGetJournalRequest

@dynamic uuid;

typedef struct ACCNTGetJournalRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} ACCNTGetJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTGetJournalRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTGetJournalRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTGetJournalRequest class]
                                     rootClass:[ACCNTAccountingJournalRoot class]
                                          file:ACCNTAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTGetJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTJournalResponse

@implementation ACCNTJournalResponse

@dynamic hasStatus, status;
@dynamic hasJournal, journal;

typedef struct ACCNTJournalResponse__storage_ {
  uint32_t _has_storage_[1];
  ACCNTJournal *journal;
  COMMONStatus *status;
} ACCNTJournalResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "journal",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTJournal),
        .number = ACCNTJournalResponse_FieldNumber_Journal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTJournalResponse__storage_, journal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = ACCNTJournalResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTJournalResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTJournalResponse class]
                                     rootClass:[ACCNTAccountingJournalRoot class]
                                          file:ACCNTAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTJournalResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACCNTJournal

@implementation ACCNTJournal

@dynamic eventOneOfCase;
@dynamic uuid;
@dynamic created;
@dynamic paymentCreatedEvent;
@dynamic userVerifiedEvent;
@dynamic storeVerifiedEvent;
@dynamic postingsCreated;

typedef struct ACCNTJournal__storage_ {
  uint32_t _has_storage_[2];
  ACCNTPaymentCreatedEvent *paymentCreatedEvent;
  ACCNTUserVerifiedEvent *userVerifiedEvent;
  ACCNTStoreVerifiedEvent *storeVerifiedEvent;
  NSString *uuid;
  int64_t created;
  int64_t postingsCreated;
} ACCNTJournal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTPaymentCreatedEvent),
        .number = ACCNTJournal_FieldNumber_PaymentCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, paymentCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTUserVerifiedEvent),
        .number = ACCNTJournal_FieldNumber_UserVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, userVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(ACCNTStoreVerifiedEvent),
        .number = ACCNTJournal_FieldNumber_StoreVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, storeVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTJournal_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTJournal_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "postingsCreated",
        .dataTypeSpecific.className = NULL,
        .number = ACCNTJournal_FieldNumber_PostingsCreated,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACCNTJournal__storage_, postingsCreated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACCNTJournal class]
                                     rootClass:[ACCNTAccountingJournalRoot class]
                                          file:ACCNTAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACCNTJournal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\023\000\002\021\000\003\022\000\"\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ACCNTJournal_ClearEventOneOfCase(ACCNTJournal *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
