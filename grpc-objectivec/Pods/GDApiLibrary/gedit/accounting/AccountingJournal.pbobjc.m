// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_journal.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingJournal.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
 #import "gedit/accounting/AccountingEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - GDAAccountingJournalRoot

@implementation GDAAccountingJournalRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAAccountingJournalRoot_FileDescriptor

static GPBFileDescriptor *GDAAccountingJournalRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAUpsertJournalRequest

@implementation GDAUpsertJournalRequest

@dynamic eventOneOfCase;
@dynamic paymentCreatedEvent;
@dynamic userVerifiedEvent;
@dynamic storeCreatedEvent;

typedef struct GDAUpsertJournalRequest__storage_ {
  uint32_t _has_storage_[2];
  GDAPaymentCreatedEvent *paymentCreatedEvent;
  GDAUserVerifiedEvent *userVerifiedEvent;
  GDAStoreVerifiedEvent *storeCreatedEvent;
} GDAUpsertJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPaymentCreatedEvent),
        .number = GDAUpsertJournalRequest_FieldNumber_PaymentCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAUpsertJournalRequest__storage_, paymentCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAUserVerifiedEvent),
        .number = GDAUpsertJournalRequest_FieldNumber_UserVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAUpsertJournalRequest__storage_, userVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStoreVerifiedEvent),
        .number = GDAUpsertJournalRequest_FieldNumber_StoreCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAUpsertJournalRequest__storage_, storeCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAUpsertJournalRequest class]
                                     rootClass:[GDAAccountingJournalRoot class]
                                          file:GDAAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAUpsertJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\023\000\002\021\000\003\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GDAUpsertJournalRequest_ClearEventOneOfCase(GDAUpsertJournalRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - GDAListJournalRequest

@implementation GDAListJournalRequest

@dynamic from;
@dynamic size;

typedef struct GDAListJournalRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
} GDAListJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDAListJournalRequest_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListJournalRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListJournalRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListJournalRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListJournalRequest class]
                                     rootClass:[GDAAccountingJournalRoot class]
                                          file:GDAAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetJournalRequest

@implementation GDAGetJournalRequest

@dynamic uuid;

typedef struct GDAGetJournalRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} GDAGetJournalRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAGetJournalRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAGetJournalRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetJournalRequest class]
                                     rootClass:[GDAAccountingJournalRoot class]
                                          file:GDAAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAGetJournalRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAJournalResponse

@implementation GDAJournalResponse

@dynamic hasStatus, status;
@dynamic hasJournal, journal;

typedef struct GDAJournalResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAJournal *journal;
  GDAStatus *status;
} GDAJournalResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "journal",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAJournal),
        .number = GDAJournalResponse_FieldNumber_Journal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAJournalResponse__storage_, journal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAJournalResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAJournalResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAJournalResponse class]
                                     rootClass:[GDAAccountingJournalRoot class]
                                          file:GDAAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAJournalResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAJournal

@implementation GDAJournal

@dynamic eventOneOfCase;
@dynamic uuid;
@dynamic created;
@dynamic paymentCreatedEvent;
@dynamic userVerifiedEvent;
@dynamic storeVerifiedEvent;
@dynamic postingsCreated;

typedef struct GDAJournal__storage_ {
  uint32_t _has_storage_[2];
  GDAPaymentCreatedEvent *paymentCreatedEvent;
  GDAUserVerifiedEvent *userVerifiedEvent;
  GDAStoreVerifiedEvent *storeVerifiedEvent;
  NSString *uuid;
  int64_t created;
  int64_t postingsCreated;
} GDAJournal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPaymentCreatedEvent),
        .number = GDAJournal_FieldNumber_PaymentCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, paymentCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAUserVerifiedEvent),
        .number = GDAJournal_FieldNumber_UserVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, userVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStoreVerifiedEvent),
        .number = GDAJournal_FieldNumber_StoreVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, storeVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAJournal_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = GDAJournal_FieldNumber_Created,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "postingsCreated",
        .dataTypeSpecific.className = NULL,
        .number = GDAJournal_FieldNumber_PostingsCreated,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAJournal__storage_, postingsCreated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAJournal class]
                                     rootClass:[GDAAccountingJournalRoot class]
                                          file:GDAAccountingJournalRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAJournal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\023\000\002\021\000\003\022\000\"\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GDAJournal_ClearEventOneOfCase(GDAJournal *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
