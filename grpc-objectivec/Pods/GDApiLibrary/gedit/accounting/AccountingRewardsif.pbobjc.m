// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/accounting/accounting_rewardsif.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/accounting/AccountingRewardsif.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
 #import "gedit/accounting/AccountingEvent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - GDAAccountingRewardsifRoot

@implementation GDAAccountingRewardsifRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAAccountingRewardsifRoot_FileDescriptor

static GPBFileDescriptor *GDAAccountingRewardsifRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.accounting"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAQueryRewardsIfEventRequest

@implementation GDAQueryRewardsIfEventRequest

@dynamic eventOneOfCase;
@dynamic ifPaymentCreatedEvent;
@dynamic ifUserVerifiedEvent;
@dynamic ifStoreCreatedEvent;

typedef struct GDAQueryRewardsIfEventRequest__storage_ {
  uint32_t _has_storage_[2];
  GDAIfPaymentCreatedEvent *ifPaymentCreatedEvent;
  GDAIfUserVerifiedEvent *ifUserVerifiedEvent;
  GDAIfStoreVerifiedEvent *ifStoreCreatedEvent;
} GDAQueryRewardsIfEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ifPaymentCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAIfPaymentCreatedEvent),
        .number = GDAQueryRewardsIfEventRequest_FieldNumber_IfPaymentCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAQueryRewardsIfEventRequest__storage_, ifPaymentCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ifUserVerifiedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAIfUserVerifiedEvent),
        .number = GDAQueryRewardsIfEventRequest_FieldNumber_IfUserVerifiedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAQueryRewardsIfEventRequest__storage_, ifUserVerifiedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ifStoreCreatedEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAIfStoreVerifiedEvent),
        .number = GDAQueryRewardsIfEventRequest_FieldNumber_IfStoreCreatedEvent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GDAQueryRewardsIfEventRequest__storage_, ifStoreCreatedEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAQueryRewardsIfEventRequest class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAQueryRewardsIfEventRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\025\000\002\023\000\003\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GDAQueryRewardsIfEventRequest_ClearEventOneOfCase(GDAQueryRewardsIfEventRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - GDARewardIfEventResponse

@implementation GDARewardIfEventResponse

@dynamic hasStatus, status;
@dynamic rewardIfEventArray, rewardIfEventArray_Count;

typedef struct GDARewardIfEventResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rewardIfEventArray;
  GDAStatus *status;
} GDARewardIfEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardIfEventArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GDARewardIfEvent),
        .number = GDARewardIfEventResponse_FieldNumber_RewardIfEventArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GDARewardIfEventResponse__storage_, rewardIfEventArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDARewardIfEventResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDARewardIfEventResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDARewardIfEventResponse class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDARewardIfEventResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000rewardIfEvent\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDARewardIfEvent

@implementation GDARewardIfEvent

@dynamic userUuid;
@dynamic pointsPay;
@dynamic pointsRepay;
@dynamic comment;

typedef struct GDARewardIfEvent__storage_ {
  uint32_t _has_storage_[1];
  int32_t pointsPay;
  int32_t pointsRepay;
  NSString *userUuid;
  NSString *comment;
} GDARewardIfEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDARewardIfEvent_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDARewardIfEvent__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDARewardIfEvent_FieldNumber_PointsPay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDARewardIfEvent__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsRepay",
        .dataTypeSpecific.className = NULL,
        .number = GDARewardIfEvent_FieldNumber_PointsRepay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDARewardIfEvent__storage_, pointsRepay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = NULL,
        .number = GDARewardIfEvent_FieldNumber_Comment,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDARewardIfEvent__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDARewardIfEvent class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDARewardIfEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\013\t\000\014\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAIfPaymentCreatedEvent

@implementation GDAIfPaymentCreatedEvent

@dynamic payerUuid;
@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic payeeWorkerUuid;
@dynamic shouldpay;
@dynamic channel;

typedef struct GDAIfPaymentCreatedEvent__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldpay;
  GDAPaymentChannel channel;
  NSString *payerUuid;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
  NSString *payeeWorkerUuid;
} GDAIfPaymentCreatedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_PayerUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, payerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_PayeeUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_PayeeStoreUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeWorkerUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_PayeeWorkerUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, payeeWorkerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldpay",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_Shouldpay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, shouldpay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = GDAPaymentChannel_EnumDescriptor,
        .number = GDAIfPaymentCreatedEvent_FieldNumber_Channel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAIfPaymentCreatedEvent__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAIfPaymentCreatedEvent class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAIfPaymentCreatedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\013\t\000\014\t\000\r\016\000\016\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GDAIfPaymentCreatedEvent_Channel_RawValue(GDAIfPaymentCreatedEvent *message) {
  GPBDescriptor *descriptor = [GDAIfPaymentCreatedEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAIfPaymentCreatedEvent_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetGDAIfPaymentCreatedEvent_Channel_RawValue(GDAIfPaymentCreatedEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [GDAIfPaymentCreatedEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAIfPaymentCreatedEvent_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GDAIfUserVerifiedEvent

@implementation GDAIfUserVerifiedEvent

@dynamic userUuid;

typedef struct GDAIfUserVerifiedEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *userUuid;
} GDAIfUserVerifiedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfUserVerifiedEvent_FieldNumber_UserUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAIfUserVerifiedEvent__storage_, userUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAIfUserVerifiedEvent class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAIfUserVerifiedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAIfStoreVerifiedEvent

@implementation GDAIfStoreVerifiedEvent

@dynamic storeUuid;

typedef struct GDAIfStoreVerifiedEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *storeUuid;
} GDAIfStoreVerifiedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIfStoreVerifiedEvent_FieldNumber_StoreUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAIfStoreVerifiedEvent__storage_, storeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAIfStoreVerifiedEvent class]
                                     rootClass:[GDAAccountingRewardsifRoot class]
                                          file:GDAAccountingRewardsifRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAIfStoreVerifiedEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
