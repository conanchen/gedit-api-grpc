// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/product/catalog.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/product/Catalog.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PRDCTGCatalogRoot

@implementation PRDCTGCatalogRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PRDCTGCatalogRoot_FileDescriptor

static GPBFileDescriptor *PRDCTGCatalogRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.product"
                                                 objcPrefix:@"PRDCTG"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PRDCTGGetCatalogRequest

@implementation PRDCTGGetCatalogRequest

@dynamic uuid;

typedef struct PRDCTGGetCatalogRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} PRDCTGGetCatalogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGGetCatalogRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDCTGGetCatalogRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDCTGGetCatalogRequest class]
                                     rootClass:[PRDCTGCatalogRoot class]
                                          file:PRDCTGCatalogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDCTGGetCatalogRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDCTGListCatalogRequest

@implementation PRDCTGListCatalogRequest

@dynamic parentUuid;

typedef struct PRDCTGListCatalogRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parentUuid;
} PRDCTGListCatalogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGListCatalogRequest_FieldNumber_ParentUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDCTGListCatalogRequest__storage_, parentUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDCTGListCatalogRequest class]
                                     rootClass:[PRDCTGCatalogRoot class]
                                          file:PRDCTGCatalogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDCTGListCatalogRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDCTGCatalogResponse

@implementation PRDCTGCatalogResponse

@dynamic hasStatus, status;
@dynamic hasCatalog, catalog;

typedef struct PRDCTGCatalogResponse__storage_ {
  uint32_t _has_storage_[1];
  PRDCTGCatalog *catalog;
  COMMONStatus *status;
} PRDCTGCatalogResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "catalog",
        .dataTypeSpecific.className = GPBStringifySymbol(PRDCTGCatalog),
        .number = PRDCTGCatalogResponse_FieldNumber_Catalog,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRDCTGCatalogResponse__storage_, catalog),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = PRDCTGCatalogResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDCTGCatalogResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDCTGCatalogResponse class]
                                     rootClass:[PRDCTGCatalogRoot class]
                                          file:PRDCTGCatalogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDCTGCatalogResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDCTGCatalog

@implementation PRDCTGCatalog

@dynamic uuid;
@dynamic name;
@dynamic parentUuid;
@dynamic iconURL;

typedef struct PRDCTGCatalog__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *name;
  NSString *parentUuid;
  NSString *iconURL;
} PRDCTGCatalog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGCatalog_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDCTGCatalog__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGCatalog_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRDCTGCatalog__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGCatalog_FieldNumber_ParentUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PRDCTGCatalog__storage_, parentUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PRDCTGCatalog_FieldNumber_IconURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PRDCTGCatalog__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDCTGCatalog class]
                                     rootClass:[PRDCTGCatalogRoot class]
                                          file:PRDCTGCatalogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDCTGCatalog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\n\000\004\005!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
