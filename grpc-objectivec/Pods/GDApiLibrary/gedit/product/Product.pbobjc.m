// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/product/product.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/product/Product.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PRDPRDProductRoot

@implementation PRDPRDProductRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PRDPRDProductRoot_FileDescriptor

static GPBFileDescriptor *PRDPRDProductRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.product"
                                                 objcPrefix:@"PRDPRD"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PRDPRDGetProductRequest

@implementation PRDPRDGetProductRequest

@dynamic uuid;

typedef struct PRDPRDGetProductRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} PRDPRDGetProductRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDPRDGetProductRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDPRDGetProductRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDPRDGetProductRequest class]
                                     rootClass:[PRDPRDProductRoot class]
                                          file:PRDPRDProductRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDPRDGetProductRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDPRDListProductRequest

@implementation PRDPRDListProductRequest

@dynamic parentUuid;

typedef struct PRDPRDListProductRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parentUuid;
} PRDPRDListProductRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDPRDListProductRequest_FieldNumber_ParentUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDPRDListProductRequest__storage_, parentUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDPRDListProductRequest class]
                                     rootClass:[PRDPRDProductRoot class]
                                          file:PRDPRDProductRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDPRDListProductRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDPRDProductResponse

@implementation PRDPRDProductResponse

@dynamic hasStatus, status;
@dynamic hasProduct, product;

typedef struct PRDPRDProductResponse__storage_ {
  uint32_t _has_storage_[1];
  PRDPRDProduct *product;
  COMMONStatus *status;
} PRDPRDProductResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "product",
        .dataTypeSpecific.className = GPBStringifySymbol(PRDPRDProduct),
        .number = PRDPRDProductResponse_FieldNumber_Product,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRDPRDProductResponse__storage_, product),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = PRDPRDProductResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDPRDProductResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDPRDProductResponse class]
                                     rootClass:[PRDPRDProductRoot class]
                                          file:PRDPRDProductRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDPRDProductResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRDPRDProduct

@implementation PRDPRDProduct

@dynamic uuid;
@dynamic name;
@dynamic iconURL;

typedef struct PRDPRDProduct__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *name;
  NSString *iconURL;
} PRDPRDProduct__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PRDPRDProduct_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRDPRDProduct__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PRDPRDProduct_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRDPRDProduct__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = PRDPRDProduct_FieldNumber_IconURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PRDPRDProduct__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRDPRDProduct class]
                                     rootClass:[PRDPRDProductRoot class]
                                          file:PRDPRDProductRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRDPRDProduct__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
