// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/product/catalog_member.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/product/CatalogMember.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CTGMMBCatalogMemberRoot

@implementation CTGMMBCatalogMemberRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CTGMMBCatalogMemberRoot_FileDescriptor

static GPBFileDescriptor *CTGMMBCatalogMemberRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.product"
                                                 objcPrefix:@"CTGMMB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CTGMMBGetCatalogMemberRequest

@implementation CTGMMBGetCatalogMemberRequest

@dynamic uuid;

typedef struct CTGMMBGetCatalogMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} CTGMMBGetCatalogMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = CTGMMBGetCatalogMemberRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CTGMMBGetCatalogMemberRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CTGMMBGetCatalogMemberRequest class]
                                     rootClass:[CTGMMBCatalogMemberRoot class]
                                          file:CTGMMBCatalogMemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CTGMMBGetCatalogMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CTGMMBListCatalogMemberRequest

@implementation CTGMMBListCatalogMemberRequest

@dynamic catalogUuid;

typedef struct CTGMMBListCatalogMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *catalogUuid;
} CTGMMBListCatalogMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "catalogUuid",
        .dataTypeSpecific.className = NULL,
        .number = CTGMMBListCatalogMemberRequest_FieldNumber_CatalogUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CTGMMBListCatalogMemberRequest__storage_, catalogUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CTGMMBListCatalogMemberRequest class]
                                     rootClass:[CTGMMBCatalogMemberRoot class]
                                          file:CTGMMBCatalogMemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CTGMMBListCatalogMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CTGMMBCatalogMemberResponse

@implementation CTGMMBCatalogMemberResponse

@dynamic hasStatus, status;
@dynamic hasCatalogMember, catalogMember;

typedef struct CTGMMBCatalogMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  CTGMMBCatalogMember *catalogMember;
  COMMONStatus *status;
} CTGMMBCatalogMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "catalogMember",
        .dataTypeSpecific.className = GPBStringifySymbol(CTGMMBCatalogMember),
        .number = CTGMMBCatalogMemberResponse_FieldNumber_CatalogMember,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CTGMMBCatalogMemberResponse__storage_, catalogMember),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = CTGMMBCatalogMemberResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CTGMMBCatalogMemberResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CTGMMBCatalogMemberResponse class]
                                     rootClass:[CTGMMBCatalogMemberRoot class]
                                          file:CTGMMBCatalogMemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CTGMMBCatalogMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CTGMMBCatalogMember

@implementation CTGMMBCatalogMember

@dynamic catalogUuid;
@dynamic productUuid;

typedef struct CTGMMBCatalogMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *catalogUuid;
  NSString *productUuid;
} CTGMMBCatalogMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "catalogUuid",
        .dataTypeSpecific.className = NULL,
        .number = CTGMMBCatalogMember_FieldNumber_CatalogUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CTGMMBCatalogMember__storage_, catalogUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "productUuid",
        .dataTypeSpecific.className = NULL,
        .number = CTGMMBCatalogMember_FieldNumber_ProductUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CTGMMBCatalogMember__storage_, productUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CTGMMBCatalogMember class]
                                     rootClass:[CTGMMBCatalogMemberRoot class]
                                          file:CTGMMBCatalogMemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CTGMMBCatalogMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
