// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - COMMONCommonRoot

@implementation COMMONCommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - COMMONCommonRoot_FileDescriptor

static GPBFileDescriptor *COMMONCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit"
                                                 objcPrefix:@"COMMON"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum COMMONPaymentChannel

GPBEnumDescriptor *COMMONPaymentChannel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Alipay\000Wechat\000Unionpay\000";
    static const int32_t values[] = {
        COMMONPaymentChannel_Alipay,
        COMMONPaymentChannel_Wechat,
        COMMONPaymentChannel_Unionpay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONPaymentChannel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONPaymentChannel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONPaymentChannel_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONPaymentChannel_Alipay:
    case COMMONPaymentChannel_Wechat:
    case COMMONPaymentChannel_Unionpay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum COMMONAccountType

GPBEnumDescriptor *COMMONAccountType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Cash\000CurrentPoints\000FixedPoints\000Redpack\000C"
        "oupon\000";
    static const int32_t values[] = {
        COMMONAccountType_Cash,
        COMMONAccountType_CurrentPoints,
        COMMONAccountType_FixedPoints,
        COMMONAccountType_Redpack,
        COMMONAccountType_Coupon,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONAccountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONAccountType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONAccountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONAccountType_Cash:
    case COMMONAccountType_CurrentPoints:
    case COMMONAccountType_FixedPoints:
    case COMMONAccountType_Redpack:
    case COMMONAccountType_Coupon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - COMMONStatus

@implementation COMMONStatus

@dynamic code;
@dynamic details;

typedef struct COMMONStatus__storage_ {
  uint32_t _has_storage_[1];
  COMMONStatus_Code code;
  NSString *details;
} COMMONStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = COMMONStatus_Code_EnumDescriptor,
        .number = COMMONStatus_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(COMMONStatus__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = NULL,
        .number = COMMONStatus_FieldNumber_Details,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(COMMONStatus__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[COMMONStatus class]
                                     rootClass:[COMMONCommonRoot class]
                                          file:COMMONCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(COMMONStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t COMMONStatus_Code_RawValue(COMMONStatus *message) {
  GPBDescriptor *descriptor = [COMMONStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:COMMONStatus_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetCOMMONStatus_Code_RawValue(COMMONStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [COMMONStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:COMMONStatus_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum COMMONStatus_Code

GPBEnumDescriptor *COMMONStatus_Code_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000Cancelled\000Unknown\000InvalidArgument\000Dea"
        "dlineExceeded\000NotFound\000AlreadyExists\000Per"
        "missionDenied\000ResourceExhausted\000FailedPr"
        "econdition\000Aborted\000OutOfRange\000Unimplemen"
        "ted\000Internal\000Unavailable\000DataLoss\000Unauth"
        "enticated\000";
    static const int32_t values[] = {
        COMMONStatus_Code_Ok,
        COMMONStatus_Code_Cancelled,
        COMMONStatus_Code_Unknown,
        COMMONStatus_Code_InvalidArgument,
        COMMONStatus_Code_DeadlineExceeded,
        COMMONStatus_Code_NotFound,
        COMMONStatus_Code_AlreadyExists,
        COMMONStatus_Code_PermissionDenied,
        COMMONStatus_Code_ResourceExhausted,
        COMMONStatus_Code_FailedPrecondition,
        COMMONStatus_Code_Aborted,
        COMMONStatus_Code_OutOfRange,
        COMMONStatus_Code_Unimplemented,
        COMMONStatus_Code_Internal,
        COMMONStatus_Code_Unavailable,
        COMMONStatus_Code_DataLoss,
        COMMONStatus_Code_Unauthenticated,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONStatus_Code)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONStatus_Code_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONStatus_Code_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONStatus_Code_Ok:
    case COMMONStatus_Code_Cancelled:
    case COMMONStatus_Code_Unknown:
    case COMMONStatus_Code_InvalidArgument:
    case COMMONStatus_Code_DeadlineExceeded:
    case COMMONStatus_Code_NotFound:
    case COMMONStatus_Code_AlreadyExists:
    case COMMONStatus_Code_PermissionDenied:
    case COMMONStatus_Code_ResourceExhausted:
    case COMMONStatus_Code_FailedPrecondition:
    case COMMONStatus_Code_Aborted:
    case COMMONStatus_Code_OutOfRange:
    case COMMONStatus_Code_Unimplemented:
    case COMMONStatus_Code_Internal:
    case COMMONStatus_Code_Unavailable:
    case COMMONStatus_Code_DataLoss:
    case COMMONStatus_Code_Unauthenticated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - COMMONLocation

@implementation COMMONLocation

@dynamic lat;
@dynamic lon;

typedef struct COMMONLocation__storage_ {
  uint32_t _has_storage_[1];
  double lat;
  double lon;
} COMMONLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = COMMONLocation_FieldNumber_Lat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(COMMONLocation__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lon",
        .dataTypeSpecific.className = NULL,
        .number = COMMONLocation_FieldNumber_Lon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(COMMONLocation__storage_, lon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[COMMONLocation class]
                                     rootClass:[COMMONCommonRoot class]
                                          file:COMMONCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(COMMONLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - COMMONListString

@implementation COMMONListString

@dynamic strsArray, strsArray_Count;

typedef struct COMMONListString__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *strsArray;
} COMMONListString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "strsArray",
        .dataTypeSpecific.className = NULL,
        .number = COMMONListString_FieldNumber_StrsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(COMMONListString__storage_, strsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[COMMONListString class]
                                     rootClass:[COMMONCommonRoot class]
                                          file:COMMONCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(COMMONListString__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - COMMONDistrict

@implementation COMMONDistrict

@dynamic id_p;
@dynamic pid;
@dynamic name;
@dynamic citycode;
@dynamic adcode;
@dynamic center;
@dynamic level;

typedef struct COMMONDistrict__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *pid;
  NSString *citycode;
  NSString *adcode;
  NSString *name;
  NSString *center;
  NSString *level;
} COMMONDistrict__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Pid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, pid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "citycode",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Citycode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, citycode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Adcode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "center",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Center,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, center),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = COMMONDistrict_FieldNumber_Level,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(COMMONDistrict__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[COMMONDistrict class]
                                     rootClass:[COMMONCommonRoot class]
                                          file:COMMONCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(COMMONDistrict__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
