// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDACommonRoot

@implementation GDACommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GDACommonRoot_FileDescriptor

static GPBFileDescriptor *GDACommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum GDAPaymentChannel

GPBEnumDescriptor *GDAPaymentChannel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Alipay\000Wechat\000Unionpay\000";
    static const int32_t values[] = {
        GDAPaymentChannel_Alipay,
        GDAPaymentChannel_Wechat,
        GDAPaymentChannel_Unionpay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GDAPaymentChannel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GDAPaymentChannel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GDAPaymentChannel_IsValidValue(int32_t value__) {
  switch (value__) {
    case GDAPaymentChannel_Alipay:
    case GDAPaymentChannel_Wechat:
    case GDAPaymentChannel_Unionpay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum GDAAccountType

GPBEnumDescriptor *GDAAccountType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Cash\000CurrentPoints\000FixedPoints\000Redpack\000C"
        "oupon\000";
    static const int32_t values[] = {
        GDAAccountType_Cash,
        GDAAccountType_CurrentPoints,
        GDAAccountType_FixedPoints,
        GDAAccountType_Redpack,
        GDAAccountType_Coupon,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GDAAccountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GDAAccountType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GDAAccountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GDAAccountType_Cash:
    case GDAAccountType_CurrentPoints:
    case GDAAccountType_FixedPoints:
    case GDAAccountType_Redpack:
    case GDAAccountType_Coupon:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GDAStatus

@implementation GDAStatus

@dynamic code;
@dynamic details;

typedef struct GDAStatus__storage_ {
  uint32_t _has_storage_[1];
  GDAStatus_Code code;
  NSString *details;
} GDAStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = GDAStatus_Code_EnumDescriptor,
        .number = GDAStatus_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAStatus__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = NULL,
        .number = GDAStatus_FieldNumber_Details,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAStatus__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAStatus class]
                                     rootClass:[GDACommonRoot class]
                                          file:GDACommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GDAStatus_Code_RawValue(GDAStatus *message) {
  GPBDescriptor *descriptor = [GDAStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAStatus_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetGDAStatus_Code_RawValue(GDAStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [GDAStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAStatus_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GDAStatus_Code

GPBEnumDescriptor *GDAStatus_Code_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000Cancelled\000Unknown\000InvalidArgument\000Dea"
        "dlineExceeded\000NotFound\000AlreadyExists\000Per"
        "missionDenied\000ResourceExhausted\000FailedPr"
        "econdition\000Aborted\000OutOfRange\000Unimplemen"
        "ted\000Internal\000Unavailable\000DataLoss\000Unauth"
        "enticated\000";
    static const int32_t values[] = {
        GDAStatus_Code_Ok,
        GDAStatus_Code_Cancelled,
        GDAStatus_Code_Unknown,
        GDAStatus_Code_InvalidArgument,
        GDAStatus_Code_DeadlineExceeded,
        GDAStatus_Code_NotFound,
        GDAStatus_Code_AlreadyExists,
        GDAStatus_Code_PermissionDenied,
        GDAStatus_Code_ResourceExhausted,
        GDAStatus_Code_FailedPrecondition,
        GDAStatus_Code_Aborted,
        GDAStatus_Code_OutOfRange,
        GDAStatus_Code_Unimplemented,
        GDAStatus_Code_Internal,
        GDAStatus_Code_Unavailable,
        GDAStatus_Code_DataLoss,
        GDAStatus_Code_Unauthenticated,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GDAStatus_Code)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GDAStatus_Code_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GDAStatus_Code_IsValidValue(int32_t value__) {
  switch (value__) {
    case GDAStatus_Code_Ok:
    case GDAStatus_Code_Cancelled:
    case GDAStatus_Code_Unknown:
    case GDAStatus_Code_InvalidArgument:
    case GDAStatus_Code_DeadlineExceeded:
    case GDAStatus_Code_NotFound:
    case GDAStatus_Code_AlreadyExists:
    case GDAStatus_Code_PermissionDenied:
    case GDAStatus_Code_ResourceExhausted:
    case GDAStatus_Code_FailedPrecondition:
    case GDAStatus_Code_Aborted:
    case GDAStatus_Code_OutOfRange:
    case GDAStatus_Code_Unimplemented:
    case GDAStatus_Code_Internal:
    case GDAStatus_Code_Unavailable:
    case GDAStatus_Code_DataLoss:
    case GDAStatus_Code_Unauthenticated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GDALocation

@implementation GDALocation

@dynamic lat;
@dynamic lon;

typedef struct GDALocation__storage_ {
  uint32_t _has_storage_[1];
  double lat;
  double lon;
} GDALocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lat",
        .dataTypeSpecific.className = NULL,
        .number = GDALocation_FieldNumber_Lat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDALocation__storage_, lat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lon",
        .dataTypeSpecific.className = NULL,
        .number = GDALocation_FieldNumber_Lon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDALocation__storage_, lon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDALocation class]
                                     rootClass:[GDACommonRoot class]
                                          file:GDACommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDALocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListString

@implementation GDAListString

@dynamic strsArray, strsArray_Count;

typedef struct GDAListString__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *strsArray;
} GDAListString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "strsArray",
        .dataTypeSpecific.className = NULL,
        .number = GDAListString_FieldNumber_StrsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GDAListString__storage_, strsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListString class]
                                     rootClass:[GDACommonRoot class]
                                          file:GDACommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListString__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDADistrict

@implementation GDADistrict

@dynamic id_p;
@dynamic pid;
@dynamic name;
@dynamic citycode;
@dynamic adcode;
@dynamic center;
@dynamic level;

typedef struct GDADistrict__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *pid;
  NSString *citycode;
  NSString *adcode;
  NSString *name;
  NSString *center;
  NSString *level;
} GDADistrict__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Pid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, pid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "citycode",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Citycode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, citycode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "adcode",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Adcode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, adcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "center",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Center,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, center),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = GDADistrict_FieldNumber_Level,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDADistrict__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDADistrict class]
                                     rootClass:[GDACommonRoot class]
                                          file:GDACommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDADistrict__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
