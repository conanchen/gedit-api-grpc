// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/payment/payment_common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/payment/PaymentCommon.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDAPaymentCommonRoot

@implementation GDAPaymentCommonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAPaymentCommonRoot_FileDescriptor

static GPBFileDescriptor *GDAPaymentCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.payment"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAPaymentResponse

@implementation GDAPaymentResponse

@dynamic hasStatus, status;
@dynamic hasPayment, payment;

typedef struct GDAPaymentResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAPayment *payment;
  GDAStatus *status;
} GDAPaymentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payment",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPayment),
        .number = GDAPaymentResponse_FieldNumber_Payment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPaymentResponse__storage_, payment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAPaymentResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPaymentResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPaymentResponse class]
                                     rootClass:[GDAPaymentCommonRoot class]
                                          file:GDAPaymentCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPaymentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPayment

@implementation GDAPayment

@dynamic uuid;
@dynamic payerCode;
@dynamic payerUuid;
@dynamic payeeCode;
@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic payeeWorkerUuid;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;
@dynamic pointsRepay;
@dynamic isPointsPay;
@dynamic paymentChannel;
@dynamic paymentChannelSignature;
@dynamic paymentStatus;
@dynamic created;

typedef struct GDAPayment__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  int32_t pointsRepay;
  GDAPaymentChannel paymentChannel;
  GDAPayment_PaymentStatus paymentStatus;
  NSString *uuid;
  NSString *payerCode;
  NSString *payerUuid;
  NSString *payeeCode;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
  NSString *payeeWorkerUuid;
  NSString *paymentChannelSignature;
  int64_t created;
} GDAPayment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayerCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayerUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayeeCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payeeCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayeeUuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayeeStoreUuid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeWorkerUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PayeeWorkerUuid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, payeeWorkerUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_ShouldPay,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_ActualPay,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PointsPay,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsRepay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PointsRepay,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, pointsRepay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_IsPointsPay,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "paymentChannel",
        .dataTypeSpecific.enumDescFunc = GDAPaymentChannel_EnumDescriptor,
        .number = GDAPayment_FieldNumber_PaymentChannel,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, paymentChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "paymentChannelSignature",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_PaymentChannelSignature,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, paymentChannelSignature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paymentStatus",
        .dataTypeSpecific.enumDescFunc = GDAPayment_PaymentStatus_EnumDescriptor,
        .number = GDAPayment_FieldNumber_PaymentStatus,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, paymentStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayment_FieldNumber_Created,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GDAPayment__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPayment class]
                                     rootClass:[GDAPaymentCommonRoot class]
                                          file:GDAPaymentCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPayment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\n\t\000\013\t\000\025\t\000\026\t\000\027\016\000\030\017\000\036\t\000\037\t\000 \t\000!\013\000\"\013\000(\016\000)\027\000"
        "2\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GDAPayment_PaymentChannel_RawValue(GDAPayment *message) {
  GPBDescriptor *descriptor = [GDAPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAPayment_FieldNumber_PaymentChannel];
  return GPBGetMessageInt32Field(message, field);
}

void SetGDAPayment_PaymentChannel_RawValue(GDAPayment *message, int32_t value) {
  GPBDescriptor *descriptor = [GDAPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAPayment_FieldNumber_PaymentChannel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t GDAPayment_PaymentStatus_RawValue(GDAPayment *message) {
  GPBDescriptor *descriptor = [GDAPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAPayment_FieldNumber_PaymentStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetGDAPayment_PaymentStatus_RawValue(GDAPayment *message, int32_t value) {
  GPBDescriptor *descriptor = [GDAPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GDAPayment_FieldNumber_PaymentStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GDAPayment_PaymentStatus

GPBEnumDescriptor *GDAPayment_PaymentStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "New\000Inprogress\000Failed\000Ok\000";
    static const int32_t values[] = {
        GDAPayment_PaymentStatus_New,
        GDAPayment_PaymentStatus_Inprogress,
        GDAPayment_PaymentStatus_Failed,
        GDAPayment_PaymentStatus_Ok,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GDAPayment_PaymentStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GDAPayment_PaymentStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GDAPayment_PaymentStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case GDAPayment_PaymentStatus_New:
    case GDAPayment_PaymentStatus_Inprogress:
    case GDAPayment_PaymentStatus_Failed:
    case GDAPayment_PaymentStatus_Ok:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
