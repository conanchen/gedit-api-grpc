// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/payment/payment_inapp_payee.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/payment/PaymentInappPayee.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
 #import "gedit/payment/PaymentCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDAPaymentInappPayeeRoot

@implementation GDAPaymentInappPayeeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAPaymentInappPayeeRoot_FileDescriptor

static GPBFileDescriptor *GDAPaymentInappPayeeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.payment"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAGetMyPayerCodeRequest

@implementation GDAGetMyPayerCodeRequest


typedef struct GDAGetMyPayerCodeRequest__storage_ {
  uint32_t _has_storage_[1];
} GDAGetMyPayerCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetMyPayerCodeRequest class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GDAGetMyPayerCodeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetMyPayerCodeResponse

@implementation GDAGetMyPayerCodeResponse

@dynamic hasStatus, status;
@dynamic hasPayerCode, payerCode;

typedef struct GDAGetMyPayerCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAPayerCode *payerCode;
  GDAStatus *status;
} GDAGetMyPayerCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPayerCode),
        .number = GDAGetMyPayerCodeResponse_FieldNumber_PayerCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAGetMyPayerCodeResponse__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAGetMyPayerCodeResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAGetMyPayerCodeResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetMyPayerCodeResponse class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAGetMyPayerCodeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPayerCode

@implementation GDAPayerCode

@dynamic payerCode;
@dynamic expiresIn;
@dynamic payerLogo;
@dynamic payerName;

typedef struct GDAPayerCode__storage_ {
  uint32_t _has_storage_[1];
  NSString *payerCode;
  NSString *payerLogo;
  NSString *payerName;
  int64_t expiresIn;
} GDAPayerCode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayerCode_FieldNumber_PayerCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPayerCode__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresIn",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayerCode_FieldNumber_ExpiresIn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPayerCode__storage_, expiresIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "payerLogo",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayerCode_FieldNumber_PayerLogo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAPayerCode__storage_, payerLogo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerName",
        .dataTypeSpecific.className = NULL,
        .number = GDAPayerCode_FieldNumber_PayerName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAPayerCode__storage_, payerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPayerCode class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPayerCode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\003\t\000\007\t\000\t\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetPayerCodeRequest

@implementation GDAGetPayerCodeRequest

@dynamic payerCode;

typedef struct GDAGetPayerCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *payerCode;
} GDAGetPayerCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAGetPayerCodeRequest_FieldNumber_PayerCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAGetPayerCodeRequest__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetPayerCodeRequest class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAGetPayerCodeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\r\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetPayerCodeResponse

@implementation GDAGetPayerCodeResponse

@dynamic hasStatus, status;
@dynamic hasPayerCode, payerCode;

typedef struct GDAGetPayerCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAPayerCode *payerCode;
  GDAStatus *status;
} GDAGetPayerCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAPayerCode),
        .number = GDAGetPayerCodeResponse_FieldNumber_PayerCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAGetPayerCodeResponse__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAGetPayerCodeResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAGetPayerCodeResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetPayerCodeResponse class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAGetPayerCodeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPreparePayeeInappPaymentRequest

@implementation GDAPreparePayeeInappPaymentRequest

@dynamic payerCode;
@dynamic shouldPay;
@dynamic isPointsPay;

typedef struct GDAPreparePayeeInappPaymentRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  NSString *payerCode;
} GDAPreparePayeeInappPaymentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentRequest_FieldNumber_PayerCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentRequest__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentRequest_FieldNumber_ShouldPay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentRequest__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentRequest_FieldNumber_IsPointsPay,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPreparePayeeInappPaymentRequest class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPreparePayeeInappPaymentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\r\t\000\017\t\000\023\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAPreparePayeeInappPaymentResponse

@implementation GDAPreparePayeeInappPaymentResponse

@dynamic hasStatus, status;
@dynamic payerCode;
@dynamic payerName;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;
@dynamic pointsRepay;
@dynamic isPointsPay;

typedef struct GDAPreparePayeeInappPaymentResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  int32_t pointsRepay;
  NSString *payerCode;
  NSString *payerName;
  GDAStatus *status;
} GDAPreparePayeeInappPaymentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_PayerCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerName",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_PayerName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, payerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_ShouldPay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_ActualPay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_PointsPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsRepay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_PointsRepay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, pointsRepay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isPointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_IsPointsPay,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAPreparePayeeInappPaymentResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAPreparePayeeInappPaymentResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAPreparePayeeInappPaymentResponse class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAPreparePayeeInappPaymentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\014\t\000\r\t\000\017\t\000\020\t\000\021\t\000\022\013\000\023\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDACreatePayeeInappPaymentRequest

@implementation GDACreatePayeeInappPaymentRequest

@dynamic payerCode;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;
@dynamic payerIp;
@dynamic isPointsPay;

typedef struct GDACreatePayeeInappPaymentRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  NSString *payerCode;
  NSString *payerIp;
} GDACreatePayeeInappPaymentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerCode",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_PayerCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDACreatePayeeInappPaymentRequest__storage_, payerCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_ShouldPay,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDACreatePayeeInappPaymentRequest__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_ActualPay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDACreatePayeeInappPaymentRequest__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_PointsPay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDACreatePayeeInappPaymentRequest__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "payerIp",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_PayerIp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDACreatePayeeInappPaymentRequest__storage_, payerIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isPointsPay",
        .dataTypeSpecific.className = NULL,
        .number = GDACreatePayeeInappPaymentRequest_FieldNumber_IsPointsPay,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDACreatePayeeInappPaymentRequest class]
                                     rootClass:[GDAPaymentInappPayeeRoot class]
                                          file:GDAPaymentInappPayeeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDACreatePayeeInappPaymentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\r\t\000\017\t\000\020\t\000\021\t\000\022\007\000\023\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
