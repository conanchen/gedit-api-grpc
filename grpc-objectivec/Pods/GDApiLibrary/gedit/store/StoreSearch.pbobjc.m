// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/store/store_search.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/store/StoreSearch.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - STSCHStoreSearchRoot

@implementation STSCHStoreSearchRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - STSCHStoreSearchRoot_FileDescriptor

static GPBFileDescriptor *STSCHStoreSearchRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.store"
                                                 objcPrefix:@"STSCH"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - STSCHIndexStoreRequest

@implementation STSCHIndexStoreRequest

@dynamic uuid;
@dynamic name;
@dynamic logo;
@dynamic hasLocation, location;
@dynamic type;
@dynamic desc;
@dynamic pointsRate;
@dynamic amapAdCode;
@dynamic amapAoiName;
@dynamic amapBuildingId;
@dynamic amapStreet;
@dynamic amapStreetNum;
@dynamic amapDistrict;
@dynamic amapCityCode;
@dynamic amapCity;
@dynamic amapProvince;
@dynamic amapCountry;

typedef struct STSCHIndexStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *name;
  NSString *logo;
  COMMONLocation *location;
  NSString *type;
  NSString *desc;
  NSString *amapAdCode;
  NSString *amapAoiName;
  NSString *amapBuildingId;
  NSString *amapStreet;
  NSString *amapStreetNum;
  NSString *amapDistrict;
  NSString *amapCityCode;
  NSString *amapCity;
  NSString *amapProvince;
  NSString *amapCountry;
  double pointsRate;
} STSCHIndexStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_Logo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONLocation),
        .number = STSCHIndexStoreRequest_FieldNumber_Location,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_Desc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointsRate",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_PointsRate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, pointsRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "amapAdCode",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapAdCode,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapAdCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapAoiName",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapAoiName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapAoiName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapBuildingId",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapBuildingId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapBuildingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapStreet",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapStreet,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapStreetNum",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapStreetNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapStreetNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapDistrict",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapDistrict,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapDistrict),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCityCode",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapCityCode,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapCityCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCity",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapCity,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapCity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapProvince",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapProvince,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapProvince),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCountry",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreRequest_FieldNumber_AmapCountry,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(STSCHIndexStoreRequest__storage_, amapCountry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHIndexStoreRequest class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHIndexStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\010\n\000\024\n\000\025\013\000\026\016\000\027\n\000\030\r\000\031\014\000\032\014\000\033\010\000\034\014\000\035\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STSCHIndexStoreResponse

@implementation STSCHIndexStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct STSCHIndexStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  COMMONStatus *status;
} STSCHIndexStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = STSCHIndexStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STSCHIndexStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = STSCHIndexStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHIndexStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHIndexStoreResponse class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHIndexStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STSCHDeleteStoreRequest

@implementation STSCHDeleteStoreRequest

@dynamic uuid;

typedef struct STSCHDeleteStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} STSCHDeleteStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = STSCHDeleteStoreRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHDeleteStoreRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHDeleteStoreRequest class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHDeleteStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STSCHDeleteStoreResponse

@implementation STSCHDeleteStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct STSCHDeleteStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  COMMONStatus *status;
} STSCHDeleteStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = STSCHDeleteStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STSCHDeleteStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = STSCHDeleteStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHDeleteStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHDeleteStoreResponse class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHDeleteStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STSCHSearchStoreRequest

@implementation STSCHSearchStoreRequest

@dynamic hasLocation, location;
@dynamic type;
@dynamic keyword;
@dynamic from;
@dynamic size;

typedef struct STSCHSearchStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  COMMONLocation *location;
  NSString *type;
  NSString *keyword;
} STSCHSearchStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONLocation),
        .number = STSCHSearchStoreRequest_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHSearchStoreRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STSCHSearchStoreRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreRequest_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STSCHSearchStoreRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(STSCHSearchStoreRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreRequest_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(STSCHSearchStoreRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHSearchStoreRequest class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHSearchStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STSCHSearchStoreResponse

@implementation STSCHSearchStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;
@dynamic name;
@dynamic logo;
@dynamic hasLocation, location;
@dynamic type;
@dynamic desc;
@dynamic pointsRate;
@dynamic amapStreet;
@dynamic amapDistrict;
@dynamic amapCity;
@dynamic from;

typedef struct STSCHSearchStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  NSString *uuid;
  NSString *name;
  NSString *logo;
  COMMONLocation *location;
  NSString *type;
  NSString *desc;
  NSString *amapStreet;
  NSString *amapDistrict;
  NSString *amapCity;
  COMMONStatus *status;
  double pointsRate;
} STSCHSearchStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_Logo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONLocation),
        .number = STSCHSearchStoreResponse_FieldNumber_Location,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_Desc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointsRate",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_PointsRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, pointsRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "amapStreet",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_AmapStreet,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, amapStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapDistrict",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_AmapDistrict,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, amapDistrict),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCity",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_AmapCity,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, amapCity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = STSCHSearchStoreResponse_FieldNumber_From,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = STSCHSearchStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STSCHSearchStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STSCHSearchStoreResponse class]
                                     rootClass:[STSCHStoreSearchRoot class]
                                          file:STSCHStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STSCHSearchStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\010\n\000\027\n\000\031\014\000\033\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
