// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/store/store_search.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/store/StoreSearch.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDAStoreSearchRoot

@implementation GDAStoreSearchRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAStoreSearchRoot_FileDescriptor

static GPBFileDescriptor *GDAStoreSearchRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.store"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAIndexStoreRequest

@implementation GDAIndexStoreRequest

@dynamic uuid;
@dynamic name;
@dynamic logo;
@dynamic hasLocation, location;
@dynamic type;
@dynamic desc;
@dynamic pointsRate;
@dynamic amapAdCode;
@dynamic amapAoiName;
@dynamic amapBuildingId;
@dynamic amapStreet;
@dynamic amapStreetNum;
@dynamic amapDistrict;
@dynamic amapCityCode;
@dynamic amapCity;
@dynamic amapProvince;
@dynamic amapCountry;

typedef struct GDAIndexStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *name;
  NSString *logo;
  GDALocation *location;
  NSString *type;
  NSString *desc;
  NSString *amapAdCode;
  NSString *amapAoiName;
  NSString *amapBuildingId;
  NSString *amapStreet;
  NSString *amapStreetNum;
  NSString *amapDistrict;
  NSString *amapCityCode;
  NSString *amapCity;
  NSString *amapProvince;
  NSString *amapCountry;
  double pointsRate;
} GDAIndexStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_Logo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(GDALocation),
        .number = GDAIndexStoreRequest_FieldNumber_Location,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_Desc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointsRate",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_PointsRate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, pointsRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "amapAdCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapAdCode,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapAdCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapAoiName",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapAoiName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapAoiName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapBuildingId",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapBuildingId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapBuildingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapStreet",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapStreet,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapStreetNum",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapStreetNum,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapStreetNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapDistrict",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapDistrict,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapDistrict),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCityCode",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapCityCode,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapCityCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCity",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapCity,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapCity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapProvince",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapProvince,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapProvince),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCountry",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreRequest_FieldNumber_AmapCountry,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(GDAIndexStoreRequest__storage_, amapCountry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAIndexStoreRequest class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAIndexStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\010\n\000\024\n\000\025\013\000\026\016\000\027\n\000\030\r\000\031\014\000\032\014\000\033\010\000\034\014\000\035\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAIndexStoreResponse

@implementation GDAIndexStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct GDAIndexStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  GDAStatus *status;
} GDAIndexStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAIndexStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAIndexStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAIndexStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAIndexStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAIndexStoreResponse class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAIndexStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDADeleteStoreRequest

@implementation GDADeleteStoreRequest

@dynamic uuid;

typedef struct GDADeleteStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} GDADeleteStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDADeleteStoreRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDADeleteStoreRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDADeleteStoreRequest class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDADeleteStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDADeleteStoreResponse

@implementation GDADeleteStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct GDADeleteStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  GDAStatus *status;
} GDADeleteStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDADeleteStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDADeleteStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDADeleteStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDADeleteStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDADeleteStoreResponse class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDADeleteStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDASearchStoreRequest

@implementation GDASearchStoreRequest

@dynamic hasLocation, location;
@dynamic type;
@dynamic keyword;
@dynamic from;
@dynamic size;

typedef struct GDASearchStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  GDALocation *location;
  NSString *type;
  NSString *keyword;
} GDASearchStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(GDALocation),
        .number = GDASearchStoreRequest_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDASearchStoreRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDASearchStoreRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreRequest_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDASearchStoreRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDASearchStoreRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreRequest_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDASearchStoreRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDASearchStoreRequest class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDASearchStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDASearchStoreResponse

@implementation GDASearchStoreResponse

@dynamic hasStatus, status;
@dynamic uuid;
@dynamic name;
@dynamic logo;
@dynamic hasLocation, location;
@dynamic type;
@dynamic desc;
@dynamic pointsRate;
@dynamic amapStreet;
@dynamic amapDistrict;
@dynamic amapCity;
@dynamic from;

typedef struct GDASearchStoreResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  NSString *uuid;
  NSString *name;
  NSString *logo;
  GDALocation *location;
  NSString *type;
  NSString *desc;
  NSString *amapStreet;
  NSString *amapDistrict;
  NSString *amapCity;
  GDAStatus *status;
  double pointsRate;
} GDASearchStoreResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_Logo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(GDALocation),
        .number = GDASearchStoreResponse_FieldNumber_Location,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_Desc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pointsRate",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_PointsRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, pointsRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "amapStreet",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_AmapStreet,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, amapStreet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapDistrict",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_AmapDistrict,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, amapDistrict),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amapCity",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_AmapCity,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, amapCity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDASearchStoreResponse_FieldNumber_From,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDASearchStoreResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDASearchStoreResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDASearchStoreResponse class]
                                     rootClass:[GDAStoreSearchRoot class]
                                          file:GDAStoreSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDASearchStoreResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\010\n\000\027\n\000\031\014\000\033\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
