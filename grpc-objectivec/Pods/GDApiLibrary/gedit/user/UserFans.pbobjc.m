// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/user/user_fans.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/user/UserFans.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDAUserFansRoot

@implementation GDAUserFansRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDAUserFansRoot_FileDescriptor

static GPBFileDescriptor *GDAUserFansRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.user"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAAddFanshipRequest

@implementation GDAAddFanshipRequest

@dynamic fanUuid;

typedef struct GDAAddFanshipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fanUuid;
} GDAAddFanshipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fanUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAAddFanshipRequest_FieldNumber_FanUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAAddFanshipRequest__storage_, fanUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAAddFanshipRequest class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAAddFanshipRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAFindParentFanshipRequest

@implementation GDAFindParentFanshipRequest

@dynamic fanUuid;

typedef struct GDAFindParentFanshipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fanUuid;
} GDAFindParentFanshipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fanUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAFindParentFanshipRequest_FieldNumber_FanUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAFindParentFanshipRequest__storage_, fanUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAFindParentFanshipRequest class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAFindParentFanshipRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListChildFanshipRequest

@implementation GDAListChildFanshipRequest

@dynamic parentUuid;
@dynamic from;
@dynamic size;

typedef struct GDAListChildFanshipRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *parentUuid;
} GDAListChildFanshipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAListChildFanshipRequest_FieldNumber_ParentUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListChildFanshipRequest__storage_, parentUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDAListChildFanshipRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListChildFanshipRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListChildFanshipRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAListChildFanshipRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListChildFanshipRequest class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListChildFanshipRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListMyFanRequest

@implementation GDAListMyFanRequest

@dynamic lastUpdated;

typedef struct GDAListMyFanRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t lastUpdated;
} GDAListMyFanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = GDAListMyFanRequest_FieldNumber_LastUpdated,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListMyFanRequest__storage_, lastUpdated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListMyFanRequest class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListMyFanRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAFanshipResponse

@implementation GDAFanshipResponse

@dynamic hasStatus, status;
@dynamic hasFanship, fanship;

typedef struct GDAFanshipResponse__storage_ {
  uint32_t _has_storage_[1];
  GDAFanship *fanship;
  GDAStatus *status;
} GDAFanshipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fanship",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAFanship),
        .number = GDAFanshipResponse_FieldNumber_Fanship,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAFanshipResponse__storage_, fanship),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDAFanshipResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAFanshipResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAFanshipResponse class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAFanshipResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAFanship

@implementation GDAFanship

@dynamic from;
@dynamic parentUuid;
@dynamic parentName;
@dynamic fanUuid;
@dynamic fanName;
@dynamic created;

typedef struct GDAFanship__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  NSString *parentUuid;
  NSString *fanUuid;
  NSString *fanName;
  NSString *parentName;
  int64_t created;
} GDAFanship__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_ParentUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, parentUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fanUuid",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_FanUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, fanUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fanName",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_FanName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, fanName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_Created,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "parentName",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_ParentName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, parentName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GDAFanship_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAFanship__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAFanship class]
                                     rootClass:[GDAUserFansRoot class]
                                          file:GDAUserFansRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAFanship__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\002\007\000\003\007\000\013\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
