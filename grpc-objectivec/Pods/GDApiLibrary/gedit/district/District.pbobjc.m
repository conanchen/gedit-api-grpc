// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/district/district.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/district/District.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DISTRICTDistrictRoot

@implementation DISTRICTDistrictRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DISTRICTDistrictRoot_FileDescriptor

static GPBFileDescriptor *DISTRICTDistrictRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.district"
                                                 objcPrefix:@"DISTRICT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DISTRICTUpsertDistrictRequest

@implementation DISTRICTUpsertDistrictRequest

@dynamic hasDistrict, district;

typedef struct DISTRICTUpsertDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  COMMONDistrict *district;
} DISTRICTUpsertDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "district",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONDistrict),
        .number = DISTRICTUpsertDistrictRequest_FieldNumber_District,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DISTRICTUpsertDistrictRequest__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DISTRICTUpsertDistrictRequest class]
                                     rootClass:[DISTRICTDistrictRoot class]
                                          file:DISTRICTDistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DISTRICTUpsertDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DISTRICTGetTopDistrictRequest

@implementation DISTRICTGetTopDistrictRequest


typedef struct DISTRICTGetTopDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
} DISTRICTGetTopDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DISTRICTGetTopDistrictRequest class]
                                     rootClass:[DISTRICTDistrictRoot class]
                                          file:DISTRICTDistrictRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DISTRICTGetTopDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DISTRICTListChildDistrictRequest

@implementation DISTRICTListChildDistrictRequest

@dynamic parentId;
@dynamic size;

typedef struct DISTRICTListChildDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int64_t parentId;
} DISTRICTListChildDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = DISTRICTListChildDistrictRequest_FieldNumber_ParentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DISTRICTListChildDistrictRequest__storage_, parentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = DISTRICTListChildDistrictRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DISTRICTListChildDistrictRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DISTRICTListChildDistrictRequest class]
                                     rootClass:[DISTRICTDistrictRoot class]
                                          file:DISTRICTDistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DISTRICTListChildDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DISTRICTListDistrictRequest

@implementation DISTRICTListDistrictRequest

@dynamic page;
@dynamic size;

typedef struct DISTRICTListDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int64_t page;
} DISTRICTListDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = DISTRICTListDistrictRequest_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DISTRICTListDistrictRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = DISTRICTListDistrictRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DISTRICTListDistrictRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DISTRICTListDistrictRequest class]
                                     rootClass:[DISTRICTDistrictRoot class]
                                          file:DISTRICTDistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DISTRICTListDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DISTRICTDistrictResponse

@implementation DISTRICTDistrictResponse

@dynamic hasStatus, status;
@dynamic hasDistrict, district;

typedef struct DISTRICTDistrictResponse__storage_ {
  uint32_t _has_storage_[1];
  COMMONDistrict *district;
  COMMONStatus *status;
} DISTRICTDistrictResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "district",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONDistrict),
        .number = DISTRICTDistrictResponse_FieldNumber_District,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DISTRICTDistrictResponse__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = DISTRICTDistrictResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DISTRICTDistrictResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DISTRICTDistrictResponse class]
                                     rootClass:[DISTRICTDistrictRoot class]
                                          file:DISTRICTDistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DISTRICTDistrictResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
