// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/district/district.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/district/District.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GDADistrictRoot

@implementation GDADistrictRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GDADistrictRoot_FileDescriptor

static GPBFileDescriptor *GDADistrictRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.district"
                                                 objcPrefix:@"GDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GDAUpsertDistrictRequest

@implementation GDAUpsertDistrictRequest

@dynamic hasDistrict, district;

typedef struct GDAUpsertDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  GDADistrict *district;
} GDAUpsertDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "district",
        .dataTypeSpecific.className = GPBStringifySymbol(GDADistrict),
        .number = GDAUpsertDistrictRequest_FieldNumber_District,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAUpsertDistrictRequest__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAUpsertDistrictRequest class]
                                     rootClass:[GDADistrictRoot class]
                                          file:GDADistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAUpsertDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAGetTopDistrictRequest

@implementation GDAGetTopDistrictRequest


typedef struct GDAGetTopDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
} GDAGetTopDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAGetTopDistrictRequest class]
                                     rootClass:[GDADistrictRoot class]
                                          file:GDADistrictRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GDAGetTopDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListChildDistrictRequest

@implementation GDAListChildDistrictRequest

@dynamic parentId;
@dynamic size;

typedef struct GDAListChildDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int64_t parentId;
} GDAListChildDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = GDAListChildDistrictRequest_FieldNumber_ParentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListChildDistrictRequest__storage_, parentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListChildDistrictRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListChildDistrictRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListChildDistrictRequest class]
                                     rootClass:[GDADistrictRoot class]
                                          file:GDADistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListChildDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDAListDistrictRequest

@implementation GDAListDistrictRequest

@dynamic page;
@dynamic size;

typedef struct GDAListDistrictRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int64_t page;
} GDAListDistrictRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = GDAListDistrictRequest_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDAListDistrictRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = GDAListDistrictRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDAListDistrictRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDAListDistrictRequest class]
                                     rootClass:[GDADistrictRoot class]
                                          file:GDADistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDAListDistrictRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GDADistrictResponse

@implementation GDADistrictResponse

@dynamic hasStatus, status;
@dynamic hasDistrict, district;

typedef struct GDADistrictResponse__storage_ {
  uint32_t _has_storage_[1];
  GDADistrict *district;
  GDAStatus *status;
} GDADistrictResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "district",
        .dataTypeSpecific.className = GPBStringifySymbol(GDADistrict),
        .number = GDADistrictResponse_FieldNumber_District,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GDADistrictResponse__storage_, district),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GDAStatus),
        .number = GDADistrictResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GDADistrictResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GDADistrictResponse class]
                                     rootClass:[GDADistrictRoot class]
                                          file:GDADistrictRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GDADistrictResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
