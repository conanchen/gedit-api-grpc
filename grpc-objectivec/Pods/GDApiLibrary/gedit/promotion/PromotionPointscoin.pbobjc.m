// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gedit/promotion/promotion_pointscoin.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gedit/promotion/PromotionPointscoin.pbobjc.h"
 #import "gedit/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PNTCPRMPromotionPointscoinRoot

@implementation PNTCPRMPromotionPointscoinRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PNTCPRMPromotionPointscoinRoot_FileDescriptor

static GPBFileDescriptor *PNTCPRMPromotionPointscoinRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gedit.promotion"
                                                 objcPrefix:@"PNTCPRM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PNTCPRMPreparePointsCoinRequest

@implementation PNTCPRMPreparePointsCoinRequest

@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic coinNumber;
@dynamic price;
@dynamic shouldPay;
@dynamic channel;

typedef struct PNTCPRMPreparePointsCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t coinNumber;
  int32_t price;
  int32_t shouldPay;
  COMMONPaymentChannel channel;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
} PNTCPRMPreparePointsCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_PayeeUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_PayeeStoreUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coinNumber",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_CoinNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, coinNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_Price,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_ShouldPay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = COMMONPaymentChannel_EnumDescriptor,
        .number = PNTCPRMPreparePointsCoinRequest_FieldNumber_Channel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinRequest__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMPreparePointsCoinRequest class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMPreparePointsCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\004\t\000\007\016\000\n\n\000\020\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PNTCPRMPreparePointsCoinRequest_Channel_RawValue(PNTCPRMPreparePointsCoinRequest *message) {
  GPBDescriptor *descriptor = [PNTCPRMPreparePointsCoinRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMPreparePointsCoinRequest_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPNTCPRMPreparePointsCoinRequest_Channel_RawValue(PNTCPRMPreparePointsCoinRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PNTCPRMPreparePointsCoinRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMPreparePointsCoinRequest_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PNTCPRMPreparePointsCoinResponse

@implementation PNTCPRMPreparePointsCoinResponse

@dynamic hasStatus, status;
@dynamic totalCoinsBought;
@dynamic totalCoins;
@dynamic totalCoinsAvailable;
@dynamic channelOrderUuid;

typedef struct PNTCPRMPreparePointsCoinResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t totalCoinsBought;
  int32_t totalCoins;
  int32_t totalCoinsAvailable;
  NSString *channelOrderUuid;
  COMMONStatus *status;
} PNTCPRMPreparePointsCoinResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalCoinsBought",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinResponse_FieldNumber_TotalCoinsBought,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinResponse__storage_, totalCoinsBought),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalCoins",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinResponse_FieldNumber_TotalCoins,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinResponse__storage_, totalCoins),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalCoinsAvailable",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinResponse_FieldNumber_TotalCoinsAvailable,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinResponse__storage_, totalCoinsAvailable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channelOrderUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPreparePointsCoinResponse_FieldNumber_ChannelOrderUuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinResponse__storage_, channelOrderUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = PNTCPRMPreparePointsCoinResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMPreparePointsCoinResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMPreparePointsCoinResponse class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMPreparePointsCoinResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\020\000\002\n\000\003\023\000\033\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNTCPRMBuyPointsCoinRequest

@implementation PNTCPRMBuyPointsCoinRequest

@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic coinNumber;
@dynamic price;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic channel;
@dynamic channelOrderUuid;

typedef struct PNTCPRMBuyPointsCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t coinNumber;
  int32_t price;
  int32_t shouldPay;
  int32_t actualPay;
  COMMONPaymentChannel channel;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
  NSString *channelOrderUuid;
} PNTCPRMBuyPointsCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_PayeeUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_PayeeStoreUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coinNumber",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_CoinNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, coinNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_Price,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_ShouldPay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_ActualPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = COMMONPaymentChannel_EnumDescriptor,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_Channel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "channelOrderUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMBuyPointsCoinRequest_FieldNumber_ChannelOrderUuid,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PNTCPRMBuyPointsCoinRequest__storage_, channelOrderUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMBuyPointsCoinRequest class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMBuyPointsCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\004\t\000\007\016\000\010\n\000\n\t\000\020\t\000\033\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PNTCPRMBuyPointsCoinRequest_Channel_RawValue(PNTCPRMBuyPointsCoinRequest *message) {
  GPBDescriptor *descriptor = [PNTCPRMBuyPointsCoinRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMBuyPointsCoinRequest_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPNTCPRMBuyPointsCoinRequest_Channel_RawValue(PNTCPRMBuyPointsCoinRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PNTCPRMBuyPointsCoinRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMBuyPointsCoinRequest_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PNTCPRMPointsCoin

@implementation PNTCPRMPointsCoin

@dynamic uuid;
@dynamic payeeUuid;
@dynamic payeeStoreUuid;
@dynamic coinNumber;
@dynamic price;
@dynamic shouldPay;
@dynamic discount;
@dynamic actualPay;
@dynamic channel;
@dynamic channelOrderUuid;
@dynamic created;

typedef struct PNTCPRMPointsCoin__storage_ {
  uint32_t _has_storage_[1];
  int32_t coinNumber;
  int32_t price;
  int32_t shouldPay;
  int32_t discount;
  int32_t actualPay;
  COMMONPaymentChannel channel;
  NSString *uuid;
  NSString *payeeUuid;
  NSString *payeeStoreUuid;
  NSString *channelOrderUuid;
  int64_t created;
} PNTCPRMPointsCoin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_PayeeUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, payeeUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_PayeeStoreUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, payeeStoreUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coinNumber",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_CoinNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, coinNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_ShouldPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "discount",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_Discount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, discount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_ActualPay,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = COMMONPaymentChannel_EnumDescriptor,
        .number = PNTCPRMPointsCoin_FieldNumber_Channel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "channelOrderUuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_ChannelOrderUuid,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, channelOrderUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMPointsCoin_FieldNumber_Created,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoin__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMPointsCoin class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMPointsCoin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\004\t\000\007\016\000\010\n\000\n\t\000\020\t\000\033\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PNTCPRMPointsCoin_Channel_RawValue(PNTCPRMPointsCoin *message) {
  GPBDescriptor *descriptor = [PNTCPRMPointsCoin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMPointsCoin_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPNTCPRMPointsCoin_Channel_RawValue(PNTCPRMPointsCoin *message, int32_t value) {
  GPBDescriptor *descriptor = [PNTCPRMPointsCoin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PNTCPRMPointsCoin_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PNTCPRMListPointsCoinRequest

@implementation PNTCPRMListPointsCoinRequest

@dynamic page;

typedef struct PNTCPRMListPointsCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
} PNTCPRMListPointsCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMListPointsCoinRequest_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMListPointsCoinRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMListPointsCoinRequest class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMListPointsCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNTCPRMGetPointsCoinRequest

@implementation PNTCPRMGetPointsCoinRequest

@dynamic uuid;

typedef struct PNTCPRMGetPointsCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} PNTCPRMGetPointsCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMGetPointsCoinRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMGetPointsCoinRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMGetPointsCoinRequest class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMGetPointsCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNTCPRMSearchPointsCoinRequest

@implementation PNTCPRMSearchPointsCoinRequest

@dynamic mobile;

typedef struct PNTCPRMSearchPointsCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *mobile;
} PNTCPRMSearchPointsCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = PNTCPRMSearchPointsCoinRequest_FieldNumber_Mobile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMSearchPointsCoinRequest__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMSearchPointsCoinRequest class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMSearchPointsCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNTCPRMPointsCoinResponse

@implementation PNTCPRMPointsCoinResponse

@dynamic hasStatus, status;
@dynamic hasPointsCoin, pointsCoin;

typedef struct PNTCPRMPointsCoinResponse__storage_ {
  uint32_t _has_storage_[1];
  PNTCPRMPointsCoin *pointsCoin;
  COMMONStatus *status;
} PNTCPRMPointsCoinResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pointsCoin",
        .dataTypeSpecific.className = GPBStringifySymbol(PNTCPRMPointsCoin),
        .number = PNTCPRMPointsCoinResponse_FieldNumber_PointsCoin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoinResponse__storage_, pointsCoin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = PNTCPRMPointsCoinResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNTCPRMPointsCoinResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNTCPRMPointsCoinResponse class]
                                     rootClass:[PNTCPRMPromotionPointscoinRoot class]
                                          file:PNTCPRMPromotionPointscoinRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNTCPRMPointsCoinResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
