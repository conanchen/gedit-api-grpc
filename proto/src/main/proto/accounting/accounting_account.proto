// Copyright 2015, gRPC Authors
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package bonus;

option java_multiple_files = true;
option java_package = "com.github.conanchen.gedit.accounting.account.grpc";
option java_outer_classname = "AccountingAccountProto";
option objc_class_prefix = "ACCANT";

import "common/common.proto";

// The accounting account service definition.
//https://accountingexplained.com/financial/cycle/
//https://medium.com/@RobertKhou/double-entry-accounting-in-a-relational-database-2b7838a5d7f8
service AccountingAccount {

    rpc CreateAccounts (CreateAccountsRequest) returns (stream AccountResponse) {
    }

    rpc GetAccount (GetAccountRequest) returns (AccountResponse) {
    }

    rpc FindOneAccountBy (UserAndTypeAccountRequest) returns (AccountResponse) {
    }
}


message CreateAccountsRequest {
    string userId = 11;
}

message AccountResponse {
    common.Status status = 999;
    Account account = 1;
}

message Account{
    string userId = 11;
    string id = 12;
    int64 created = 13;
    Type type = 14;
    int32 balance = 15;

    enum Type{
        CASH = 0;
        BONUS = 1;
    }
}

message GetAccountRequest {
    string id = 1;
}


message UserAndTypeAccountRequest {
    string userId = 11;
    Account.Type type = 14;
}
