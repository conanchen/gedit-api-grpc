// Copyright 2015, gRPC Authors
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package gedit.payment;

option java_multiple_files = true;
option java_package = "com.github.conanchen.gedit.payment.inapp.grpc";
option java_outer_classname = "PaymentInappProto";
option objc_class_prefix = "PMINAPP";

import "gedit/common.proto";
import "gedit/payment/payment_common.proto";

// The payment service definition.
service PaymentInappApi {
    //----START 店员/收银员收款出示二维码    <------------> 顾客扫码付款 交互API
    rpc GetMyReceiptCode (GetMyReceiptCodeRequest) returns (GetMyReceiptCodeResponse) {
        //only called by me,例如店员/收银员app调用本api生成收款码供顾客扫码支付
    }
    rpc GetReceiptCode (GetReceiptCodeRequest) returns (GetReceiptCodeResponse) {
        //顾客端调用获取店员/收银员收款码相关信息
    }
    rpc PrepareMyPayment (PreparMyPaymentRequest) returns (PrepareMyPaymentResponse) {
        //only called by me, 顾客扫码店员/收银员的收款码后，如果支付一定金额将会获取多少积分返还等信息
    }
    rpc Create (CreatePaymentRequest) returns (PaymentResponse) {
        //only called by me, 顾客确定付款
    }
    //----END 店员/收银员收款出示二维码    <------------> 顾客扫码付款 交互API
}

message GetMyReceiptCodeRequest {
    string payeeStoreUuid = 1; //收款人工作的店铺
}

message GetMyReceiptCodeResponse {
    Status status = 999;
    ReceiptCode receiptCode = 1;
}

message ReceiptCode {
    string code = 1; //店员/收银员客户端使用这个代码生成收款码QRCode
    int64 expiresIn = 3; //code的过期时间
    //以下为QRCode界面可能用到的提示用信息
    string payeeUuid = 5; //店主uuid
    string payeeLogo = 7; //店主logo
    string payeeName = 9; //店主昵称
    string payeeStoreUuid = 13; //店员/收银员工作店铺的uuid
    string payeeStoreLogo = 15; //工作店铺的logo
    string payeeStoreNamee = 17; //工作店铺的名称
    string payeeWorkerUuid = 25; //店员/收银员uuid
    string payeeWorkerLogo = 27; //店员/收银员logo
    string payeeWorkerName = 29; //店员/收银员昵称
}

message GetReceiptCodeRequest {
    string code = 1; //店员/收银员客户端使用这个代码生成QRCode
}

message GetReceiptCodeResponse {
    Status status = 999;
    ReceiptCode receiptCode = 1;
}

message PreparMyPaymentRequest {
    string payeeReceiptCode = 13;
    int32 shouldPay = 15; //应付金额 = 实付金额 + 实付积分等价金额
}

message PrepareMyPaymentResponse {
    Status status = 999;

    PreparePayment preparePayment = 1;

}

message PreparePayment {
    string payeeReceiptCode = 11; //收款码
    string payeeUuid = 12; //收款人（其实是店主）
    string payeeStoreUuid = 13; //收款店铺
    string payeeWorkerUuid = 14; //收款员工

    int32 shouldPay = 15; //应付金额 = 实付金额 + 实付积分等价金额
    int32 actualPay = 16; //实付金额
    int32 pointsPay = 17; //实付积分代替金额
    int32 pointsRepay = 18; //返还积分

}

message CreatePaymentRequest {
    //only called by myself，即支付人是我
    //payerUuid
    string payeeReceiptCode = 13; //店员、收银员的收款码
    int32 shouldPay = 15; //应付金额 = 实付金额 + 实付积分等价金额
    int32 actualPay = 16; //实付金额
    int32 pointsPay = 17; //实付积分代替金额
    string payerIp = 18; //付款人客户端的实际ip地址
    PaymentChannel channel = 25; //支付类型
}